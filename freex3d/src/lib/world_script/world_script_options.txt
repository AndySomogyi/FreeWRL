4 javascript engine linking options 
(updated July 9, 2014)

A. NO_JAVASCRIPT or !HAVE_JAVASCRIPT
- used on android and iOS to exclude javascript-specific code bit by bit
- doesn't work well on desktop - the #define may be interlaced with FRONTEND_GETS_FILES and other mobile-specific defines

B. #define HAVE_JAVASCRIPT - 3 otions:
B.1. stub - (no engine) 
similar to option A, but more reliable for different build environments. Unlike A, will load .js text, and see the Script nodes, but the script nodes won't run.
#define JAVASCRIPT_STUB
Link to:
- CScript.c, fieldSet.c fieldGet.c 
- JScript_stub.c

B.2. libmozjs/spidermonkey/JSAPI/mozilla
default, what freewrl has been using for years 2005 to 2014
#define JAVASCRIPT_SM
Link to:
- CScript.c, fieldSet.c fieldGet.c 
- JScript.c, jsUtils.c, jsVRMLBrowser.c, jsVRMLClasses.c, jsVRML_SFClasses.c jsVRML_MFClasses.c


B.3. duktape.org
started as of June 2014 not implemented - in theory a more portable javascript engine 
#define JAVASCRIPT_DUK
Link to:
- CScript.c, fieldSet.c fieldGet.c 
- JScript_duk.c, include_duktape.c, jsVRMLBrowser_duk.c, jsVRMLClasses.c

B.all If you link to all the above files:
- CScript.c, fieldSet.c fieldGet.c 
- JScript.c, jsUtils.c, jsVRMLBrowser.c, jsVRMLClasses.c, jsVRML_SFClasses.c jsVRML_MFClasses.c
- JScript_stub.c
- JScript_duk.c, include_duktape.c, jsVRMLBrowser_duk.c, jsVRMLClasses.c
then you can use the #defines listed in B to switch quickly between them for different builds.