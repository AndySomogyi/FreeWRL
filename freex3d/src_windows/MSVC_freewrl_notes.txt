 
Instructions are posted at:
http://freewrl.sourceforge.net/windowsBuild.html 
Code at:
master branch (usually stable):
https://sourceforge.net/p/freewrl/git/ci/master/tree/
develop branch (latest):
https://sourceforge.net/p/freewrl/git/ci/develop/tree/
and supporting binary libraries are at:
http://sourceforge.net/projects/freewrl/files/freewrl-win32

Updated Jan 2017 for freewrl version 4
2 MSVC versions are used:
(projectfiles_vc9 vc2008 obsolete except for handy testing: 
  spidermonkey js engine testing, and older C standard linting/testing,
  or for any remaining developers building directly on windowsXP with vc2008)
projectfiles_vc7 - vc2003 - just the activeX plugin for InternetExplorer aka IE (obsolete due to security when used in IE)
- hard to build with express versions of vc or vs - the mfc activex sdk is missing - see below for more details
projectfiles_vc12 - vs2013 - normal freewrl.exe build for windows desktop: xp, vista, 7, 8.1, 10
- Debug_glew and Release_glew (Win32) are the primary configurations 
- Debug and Release are experimental builds using angleproject, for winGLES2 demo program
- x64 is a reduced-functionality 64bit, used for SSRserver proj for big datasets

How we support windows XP from vs2013 projectfiles_vc12:
- pthreadVC2 for desktop > uses XP compatible kernel32 calls 
- http://glew.sourceforge.net/ run-time testing for FBO (frameBufferObject) support
    if not available (ie older opengl 2) then a few nodes don't render properly: GeneratedCubeMapTexture and BlendedVolumeStyle
https://msdn.microsoft.com/en-us/library/jj851139.aspx
- Using vc12 for windows xp
- see the vs2013 > freewrl etc proj > Properties > Config Props > General > Platform Toolset > v120_xp setting (triggers use of win71A platform SDK)
- see prebuildffmpeg proj > Build Events > PreBuild event > command 
  for how we launch MSYS2 console (to get vc120_xp mixed tools environment) for autotools build of ffmpeg
ffpmeg is video library for movietexture node. more on building ffmpeg: 
https://trac.ffmpeg.org/wiki/CompilationGuide/WinRT
- compiling via msys2
https://msdn.microsoft.com/en-us/library/ms229859(v=vs.110).aspx
- developer console concept
- except we open MSYS2 console from vs2013 prebuildffmpeg project on Rebuild
-- that gives us the mixed tools environment variables: vc12/C++11 and win71A platform SDK (XP)
-- exit msys2 console to continue in vs2013 (otherwise blocks while msys2 console open)
-- need to set -D_WIN32_WINNT=_WIN32_WINNT_WINXP in ffmpeg configure for its pthread thunking


Updated Feb 4, 2014
3 MSVC versions are currently used, in freewrl/freex3d/
- /projectfiles_vc9 (VS 2008) - used to build for windows XP (except ActiveX control)
--- XP uses glew/opengl32.dll/desktop-opengl, and directsound for sound/audio
--- and for windows developer(s) to check their code for linux gcc friendliness
- /projectfiles_vc12 (VS 2013) - builds for vista, win7, win8.1 desktop (except ActiveX control)
--- vista+ uses angleproject GLES2 (opengl-es-2.0) wrapper over directx for graphics, and directsound for sound/audio
- /projectfiles_vc7 (VS 2003) - used to build only ActiveX control
All are 32 bit builds, and run on 64 bit systems as win32 programs.

ACTIVEX CONTROL/PLUGIN NOTES:
To build the ActiveX project with a MS Visual C (MSVC) newer than 2003/vc7, 
edit the project parameters > linker and change any references to mfcs71.lib to 
mfcs??.lib where ?? is 90 for 2008/VC9 ie mfsc90.lib

The projectfiles_vc7/freewrlAx project is for the ActiveX control, which is the InternetExplorer plugin for freewrl. 
You need something more than the free express edition of Visual C++ to build it.
- there are special headers and dlls needed for ActiveX controls, that the express versions don't have.
The project initiator/current-maintainer dug9 had purchased a Visual C++ 2003 Standard Edition 12 years ago for $200.
-- that had the needed dlls and headers for ActiveX development, so that's what it's currently checked in with. 



When you build the freewrlAx project, it should 'register' the activex control in the system registry, 
as the handler for .x3d and .wrl file types and related MIME types model/x3d+xml model/vrml. 
OLD:
//A recent version of the freewrl_launcher 
//has a panel to control / reset what handles what in InternetExplorer, in case you have some other downloads
//handling .x3d and .wrl too.

(Launcher is a separate source download in SupportFiles at http://sourceforge.net/projects/freewrl/files/freewrl-win32/ 
or you can use the one that gets installed during binary .msi installation)
Then to test, you open an html file in internetExplorer that has an embed, object or href with a url.x3d/.wrl.


ABOUT THE LIBRARIES IN LIB_WINDOWS:
the .vcproj in projectfiles_vc7, _vc9 and _vc12 point to headers and .libs in lib_windows or lib_windows_vc12 folder
- you download the contents of these folders from http://sourceforge.net/projects/freewrl/files/freewrl-win32
Then if you git clone freewrl to your directory 'source' then put the lib_windows directories in 'source' too:
ie 
c:\source\freewrl ... source code as git cloned and checked out, or as you unzipped
c:\source\lib_windows  (for vc9)
c:\source\lib_windows_vc12

A few more that should be in your windows system already.
gdiplus.lib/.dll - .lib seems to be on my system somewhere, or:
http://www.microsoft.com/downloads/details.aspx?FamilyID=6a63ab9c-df12-4d41-933c-be590feaa05a&DisplayLang=en  GDI+ redistributable download - gdiplus.dll 2MB 
MSopenGL - found in my windows system directories opengl32.dll

OLD / UNDER REVIEW:
// And freewrlAx depends on libfreewrl built slightly differently than for the console program (but you can build it with MSVC express).
// To build the libfreewrl for the ActiveX control you need to change the following compiler settings:
// In libfreeWRL > Property Pages > Configuration Properties > C/C++ > Preprocessor > Preprocessor Definitions
// change the following:
// COMPILING_ACTIVEX_FRONTEND_no
// FRONTEND_HANDLES_DISPLAY_THREAD_no
// FRONTEND_GETS_FILES_no
// to:
// COMPILING_ACTIVEX_FRONTEND
// FRONTEND_HANDLES_DISPLAY_THREAD
// FRONTEND_GETS_FILES
// Then when building for everything else, change those back.
// Otherwise the regular freewrl will just exit without showing anything.
